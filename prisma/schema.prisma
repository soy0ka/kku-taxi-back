generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Sex {
  Male
  Female
  Other
}

enum FeedBackContent {
  DIFFERENT_FARE
  NO_SHOW
  LATE
  NO_PAYMENT
  BAD_MANNER
}

model User {
  id               Int               @id @default(autoincrement())
  name             String
  uuid             String            @unique
  email            String            @unique
  banned           Boolean           @default(false)
  sex              Sex               @default(Other)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  authCode         authCode[]
  Tokens           Tokens[]
  bankaccount      BankAccount[]
  chatrooms        ChatRoom[]        @relation("UserChatrooms")
  Message          Message[]
  ChatReportLog    ChatReportLog[]
  PartyMembership  PartyMembership[]
  Party            Party[]
  FeedBackGiven    FeedBack[]        @relation("FeedBackGiven")
  FeedBackReceived FeedBack[]        @relation("FeedBackReceived")
}

model FeedBack {
  id           Int             @id @default(autoincrement())
  targetId     Int
  reportUserId Int
  content      FeedBackContent
  createdAt    DateTime        @default(now())
  User         User            @relation("FeedBackGiven", fields: [targetId], references: [id])
  reportedBy   User            @relation("FeedBackReceived", fields: [reportUserId], references: [id])
}

model BankAccount {
  id       Int    @id @default(autoincrement())
  userId   Int
  account  String
  holder   String
  bankName String
  User     User   @relation(fields: [userId], references: [id])
}

model authCode {
  id        Int      @id @default(autoincrement())
  code      String
  userId    Int
  createdAt DateTime @default(now())
  expiredAt DateTime
  User      User     @relation(fields: [userId], references: [id])
}

model Tokens {
  id          Int      @id @default(autoincrement())
  token       String
  device      String
  platform    String
  userId      Int
  createdAt   DateTime @default(now())
  expiredAt   DateTime
  deviceToken String?
  User        User     @relation(fields: [userId], references: [id])
}

model ChatRoom {
  id        Int             @id @default(autoincrement())
  name      String
  users     User[]          @relation("UserChatrooms")
  messages  Message[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  isdeleted Boolean         @default(false)
  ReportLog ChatReportLog[]
  Party     Party[]

  @@index([isdeleted])
}

model Message {
  id            Int             @id @default(autoincrement())
  content       String          @db.Text
  senderId      Int
  chatRoomId    Int
  createdAt     DateTime        @default(now())
  sender        User            @relation(fields: [senderId], references: [id])
  chatRoom      ChatRoom        @relation(fields: [chatRoomId], references: [id])
  isdeleted     Boolean         @default(false)
  isSystem      Boolean         @default(false)
  ChatReportLog ChatReportLog[]

  @@index([isdeleted])
}

model ChatReportLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  chatRoomId Int
  messageId  Int
  content    String   @db.Text
  reason     String   @db.Text
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id])
  Message    Message  @relation(fields: [messageId], references: [id])
  ChatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
}

model Place {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  partiesFrom Party[] @relation("PartyFromPlace")
  partiesTo   Party[] @relation("PartyToPlace")
}

model Party {
  id               Int               @id @default(autoincrement())
  name             String
  maxSize          Int
  description      String?           @db.Text
  ownerId          Int
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  isdone           Boolean           @default(false)
  chatRoomId       Int
  departure        DateTime
  fromPlaceId      Int
  toPlaceId        Int
  payRequested     Boolean           @default(false)
  partyMemberships PartyMembership[]
  owner            User              @relation(fields: [ownerId], references: [id])
  chatRoom         ChatRoom          @relation(fields: [chatRoomId], references: [id])
  fromPlace        Place             @relation("PartyFromPlace", fields: [fromPlaceId], references: [id])
  toPlace          Place             @relation("PartyToPlace", fields: [toPlaceId], references: [id])

  @@index([isdone])
  @@index([deletedAt])
}

model PartyMembership {
  id       Int      @id @default(autoincrement())
  userId   Int
  partyId  Int
  User     User     @relation(fields: [userId], references: [id])
  Party    Party    @relation(fields: [partyId], references: [id])
  joinedAt DateTime @default(now())
}
